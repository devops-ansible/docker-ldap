#!/usr/bin/env bash

getSans() {
    sans="$( echo "${LEGO_CERT_DOMAIN}" | jq -r '.[]' 2> /dev/null )"
    if [ "$?" -eq 0 ]; then
        echo "${sans}"
    else
        echo "${LEGO_CERT_DOMAIN}"
    fi
}

getPrimary() {
    getSans | head -n 1
}

###
## if no domain is specified, skip whole lego challenge process
###

if [ -z ${LEGO_CERT_DOMAIN+x} ] || [ -z "${LEGO_CERT_DOMAIN}" ]; then
    exit 1
fi

if [ ! -z ${1+x} ] && [ "$( echo "${1}" | tr '[:upper:]' '[:lower:]' )" = "primary" ]; then
    getPrimary
    exit 0
fi

if [ ! -z ${1+x} ] && [ "$( echo "${1}" | tr '[:upper:]' '[:lower:]' )" = "certname" ]; then
    getPrimary | sed 's/^\*/\_/g'
    exit 0
fi

###
## prepare LEGO command arguments
###

legoArgs=('--accept-tos')
legoArgs+=('--path' "${LEGO_PATH}")
legoArgs+=('--email' "${LEGO_ACCOUNT_EMAIL}")
legoArgs+=('--dns' "${LEGO_DNS_PROVIDER}")

if [ ! -z ${1+x} ] && [ "$( echo "${1}" | tr '[:upper:]' '[:lower:]' )" = "test" ]; then
    # add Let's Encrypt staging server for test purpose
    legoArgs+=('--server' 'https://acme-staging-v02.api.letsencrypt.org/directory')
fi

# use DNS resolvers defined ...
# if empty string don't add argument and use LEGO defaults:
# Docker host default and Google DNS as fallback
if [ ! -z "${LEGO_DNS_RESOLVERS}" ]; then
    legoArgs+=('--dns.resolvers' "${LEGO_DNS_RESOLVERS}")
fi

for domain in $( getSans ); do
    legoArgs+=('--domains' "${domain}")
done

###
## run LEGO command
###

# first try to renew certificate
lego "${legoArgs[@]}" renew --days "${LEGO_RENEW_DAYS:-30}"

if [ "$?" -ne 0 ]; then
    # if renewal is not successfull, create new certificate
    lego "${legoArgs[@]}" run
fi

chmod    a+rx "${LEGO_PATH}" \
              "${LEGO_PATH}/certificates"
chmod -R a+r "${LEGO_PATH}/certificates"
